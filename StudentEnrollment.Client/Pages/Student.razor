@page "/students"


@using Microsoft.AspNetCore.Authorization
@using StudentEnrollment.Shared
@using StudentEnrollment.Shared.Models
@inject StudentService StudentService
@inject HttpClient Http
@attribute [Authorize]

<h3>Student</h3>


<button class="btn btn-primary mb-3" @onclick="NewStudent">Add Student</button>


@if (students == null)
{
    <p><em>Loading...</em></p>
}
else if (!students.Any())
{
    <p><em>No students found. Add one above.</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>StudentId</th>
                <th>Name</th>
                <th>Surname</th>
                <th>Email</th>
                <th>ID Number</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in students)
            {
                <tr>
                    <td>@student.StudentId</td>
                    <td>@student.StudentName</td>
                    <td>@student.StudentSurname</td>
                    <td>@student.StudentEmail</td>
                    <td>@student.StudentIDNumber</td>
                    <td>
                        <button class="btn btn-sm btn-warning" @onclick="() => EditStudent(student)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteStudent(student.StudentId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@if (editingStudent != null)
{
    <EditForm Model="editingStudent" OnValidSubmit="SaveStudent">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Name</label>
            <InputText class="form-control" @bind-Value="editingStudent.StudentName" />
        </div>
        <div class="mb-3">
            <label>Surname</label>
            <InputText class="form-control" @bind-Value="editingStudent.StudentSurname" />
        </div>
        <div class="mb-3">
            <label>Email</label>
            <InputText class="form-control" @bind-Value="editingStudent.StudentEmail" />
        </div>
        <div class="mb-3">
            <label>ID Number</label>
            <InputText class="form-control" @bind-Value="editingStudent.StudentIDNumber" />
        </div>

        <button type="submit" class="btn btn-success">Save</button>
        <button type="button" class="btn btn-secondary" @onclick="() => editingStudent = null">Cancel</button>
    </EditForm>
}

@code {
    async Task SaveStudent()
    {
        if (editingStudent.StudentId == 0)
        {
            // create new
            await Http.PostAsJsonAsync("api/students", editingStudent);
        }
        else
        {
            // update existing
            await Http.PutAsJsonAsync($"api/students/{editingStudent.StudentId}", editingStudent);
        }

        // reload
        students = await Http.GetFromJsonAsync<List<StudentEnrollment.Shared.Models.Student>>("api/students");
        editingStudent = null;
    }
}


@code {
    List<StudentEnrollment.Shared.Models.Student>? students;
    StudentEnrollment.Shared.Models.Student? editingStudent;

    protected override async Task OnInitializedAsync()
    {
        students = await Http.GetFromJsonAsync<List<StudentEnrollment.Shared.Models.Student>>("api/students");
    }

    void NewStudent()
    {
        editingStudent = new StudentEnrollment.Shared.Models.Student();
    }

    void EditStudent(StudentEnrollment.Shared.Models.Student student)
    {
        editingStudent = student;
    }

    async Task DeleteStudent(int id)
    {
        await Http.DeleteAsync($"api/students/{id}");
        students = await Http.GetFromJsonAsync<List<StudentEnrollment.Shared.Models.Student>>("api/students");
    }
}
